---
source: src/type_printer/schema_type_printer/tests/mod.rs
expression: printed
---
export type __nitrogql_schema = {
  query: Query;
};

type __Beautify<Obj> = { [K in keyof Obj]: Obj[K] } & {};
export type __SelectionSet<Orig, Obj> =
  Orig extends (infer T)[] ? __SelectionSet<T, Obj>[] :
  __Beautify<Pick<{
    [K in keyof Orig]: Obj extends Record<K, infer V> ? V : unknown
  }, Extract<keyof Orig, keyof Obj>>>;
export type __SelectionField<Obj, Key extends string> =
  Obj extends (infer T)[] ? __SelectionField<T, Key> :
  Obj extends Record<Key, infer V> ? V : unknown;
export type User = {
  __typename: "User";
  id: ID;
  name: String;
  type: UserType;
  age: Int | null;
  posts: (Post)[];
};

export type Bot = {
  __typename: "Bot";
  id: ID;
};

export type Post = {
  __typename: "Post";
  id: ID;
  title: String;
  tags: (String)[] | null;
  body: String;
};

export type Query = {
  __typename: "Query";
  me: User;
};

export type HasID = {
  id: ID;
};

export type UserType = "NormalUser" | "PremiumUser";

export type UserSearchQuery = {
  readonly age?: Int | null;
  readonly name?: String | null;
  readonly keywords?: readonly (String)[] | null;
};


